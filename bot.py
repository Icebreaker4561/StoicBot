import os
import logging
import random
from datetime import datetime, time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from stoic_quotes_100 import QUOTES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: chat_id -> tz_name
subscribers = {}

# –†–∞—Å—Å—ã–ª–∫–∞ —Ü–∏—Ç–∞—Ç—ã
async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.utcnow()
    for chat_id, tz in subscribers.items():
        # —Ç—É—Ç –º–æ–∂–Ω–æ —É—á–µ—Å—Ç—å tz, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º
        quote = random.choice(QUOTES)
        try:
            await context.bot.send_message(chat_id=chat_id, text=quote, parse_mode='HTML')
            logger.info(f"Quote sent to {chat_id}")
        except Exception as e:
            logger.error(f"Error sending quote to {chat_id}: {e}")

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
REFLECTION_TEXT = (
    "üßò‚Äç‚ôÇÔ∏è <b>–°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è</b>\n"
    "<i>–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏. –ù–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã, —á—Ç–æ–±—ã —á–µ—Å—Ç–Ω–æ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –ø—Ä–æ–∂–∏—Ç—É—é –Ω–µ–¥–µ–ª—é.</i>\n"
    "1Ô∏è‚É£ –í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —è –ø–æ–∑–≤–æ–ª–∏–ª —ç–º–æ—Ü–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö –Ω–∞–¥ —Ä–∞–∑—É–º–æ–º, –∏ –∫–∞–∫ –º–æ–≥ –±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –º—É–¥—Ä–æ, –º—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∏ —É–º–µ—Ä–µ–Ω–Ω–æ?\n"
    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º –∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º, –∞ –∫–∞–∫–∏–µ —à–ª–∏ –≤—Ä–∞–∑—Ä–µ–∑ —Å –Ω–∏–º–∏?\n"
    "3Ô∏è‚É£ –ß—Ç–æ –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ —è —Å—á–∏—Ç–∞–ª –≤–∞–∂–Ω—ã–º –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ–¥?\n"
    "4Ô∏è‚É£ –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª—É–∂–∏—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º —è —É–ø—É—Å—Ç–∏–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n"
    "5Ô∏è‚É£ –ö–∞–∫–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ —è —Å–º–æ–≥ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞, –∞ –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ —É–ø—É—Å—Ç–∏–ª?"
)

async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in subscribers:
        try:
            await context.bot.send_message(chat_id=chat_id, text=REFLECTION_TEXT, parse_mode='HTML')
            logger.info(f"Reflection sent to {chat_id}")
        except Exception as e:
            logger.error(f"Error sending reflection to {chat_id}: {e}")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –ü—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥/—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    cities = ['–ú–æ—Å–∫–≤–∞', '–¢–±–∏–ª–∏—Å–∏', '–†–∏–º', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞', '–õ–æ–Ω–¥–æ–Ω', '–ö–∏–µ–≤', '–°–∞–º–∞—Ä–∞']
    keyboard = [[c] for c in cities]
    reply = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "‚úÖ –ì–æ—Ç–æ–≤–æ!\n–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å –∏–∑ —Å—Ç–æ–∏—Ü–∏–∑–º–∞ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00.\n\n"
        "üîî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=reply
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
async def setcity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text.strip()
    chat_id = update.effective_chat.id
    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã tz=city
    subscribers[chat_id] = city
    await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}. –°–ø–∞—Å–∏–±–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    logger.info(f"User {chat_id} set city: {city}")

# /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in subscribers:
        subscribers.pop(chat_id, None)
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# /help
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "/start - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥\n"
        "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "/setcity - –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥/—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n"
        "/share - –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(text)

# /share
async def share(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_username = (await context.bot.get_me()).username
    link = f"https://t.me/{bot_username}?start"
    await update.message.reply_text(f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏: {link}")

# main
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("share", share))
    app.add_handler(CommandHandler("setcity", setcity))
    app.add_handler(MessageHandler(filters.Regex('^(–ú–æ—Å–∫–≤–∞|–¢–±–∏–ª–∏—Å–∏|–†–∏–º|–ë–∞—Ä—Å–µ–ª–æ–Ω–∞|–õ–æ–Ω–¥–æ–Ω|–ö–∏–µ–≤|–°–∞–º–∞—Ä–∞)$'), setcity))

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —Ü–∏—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
    app.job_queue.run_daily(send_quote, time=time(hour=9, minute=0))
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 12:00
    app.job_queue.run_daily(send_reflection, time=time(hour=12, minute=0), days=(6,))

    app.run_polling()

if __name__ == "__main__":
    main()
