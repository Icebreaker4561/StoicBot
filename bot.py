```python
import os
import logging
import random
from datetime import time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackContext,
)
from stoic_quotes_100 import QUOTES

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
subscribers = {}  # chat_id -> timezone string

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–∏—Ç–∞—Ç—ã
def quote_job(context: CallbackContext):
    chat_id = context.job.chat_id
    quote = random.choice(QUOTES)
    try:
        context.bot.send_message(chat_id=chat_id, text=quote, parse_mode='HTML')
        logger.info(f"–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã {chat_id}: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
def reflection_job(context: CallbackContext):
    chat_id = context.job.chat_id
    REFLECTION_TEXT = (
        "üßò‚Äç‚ôÇÔ∏è <b>–°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è. –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.</b>\n"
        "<i>–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏. –ù–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã, —á—Ç–æ–±—ã —á–µ—Å—Ç–Ω–æ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –ø—Ä–æ–∂–∏—Ç—É—é –Ω–µ–¥–µ–ª—é.</i>\n\n"
        "1Ô∏è‚É£ –í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —è –ø–æ–∑–≤–æ–ª–∏–ª —ç–º–æ—Ü–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö –Ω–∞–¥ —Ä–∞–∑—É–º–æ–º, –∏ –∫–∞–∫ –º–æ–≥ –±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –º—É–¥—Ä–æ, –º—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∏ —É–º–µ—Ä–µ–Ω–Ω–æ?\n"
        "2Ô∏è‚É£ –ö–∞–∫–∏–µ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º –∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º, –∞ –∫–∞–∫–∏–µ —à–ª–∏ –≤—Ä–∞–∑—Ä–µ–∑ —Å –Ω–∏–º–∏?\n"
        "3Ô∏è‚É£ –ß—Ç–æ –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ —è —Å—á–∏—Ç–∞–ª –≤–∞–∂–Ω—ã–º –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ–¥?\n"
        "4Ô∏è‚É£ –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª—É–∂–∏—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º —è —É–ø—É—Å—Ç–∏–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n"
        "5Ô∏è‚É£ –ö–∞–∫–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ —è —Å–º–æ–≥ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞, –∞ –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ —É–ø—É—Å—Ç–∏–ª?"
    )
    try:
        context.bot.send_message(chat_id=chat_id, text=REFLECTION_TEXT, parse_mode='HTML')
        logger.info(f"–†–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ {chat_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É
    tz = context.user_data.get('timezone')
    if not tz:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–º–∞–Ω–¥–æ–π /setcity –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π."
        )
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    subscribers[chat_id] = tz

    # –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ü–∏—Ç–∞—Ç—É –≤ 9:00
    context.job_queue.run_daily(
        quote_job,
        time=time(hour=9, minute=0),
        days=tuple(range(7)),
        context=chat_id,
        name=f"quote_{chat_id}",
        job_kwargs={'timezone': tz}
    )
    # –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 12:00
    context.job_queue.run_weekly(
        reflection_job,
        time=time(hour=12, minute=0),
        days=(6,),  # Sunday
        context=chat_id,
        name=f"reflection_{chat_id}",
        job_kwargs={'timezone': tz}
    )

    await update.message.reply_text(
        "‚úÖ –ì–æ—Ç–æ–≤–æ!\n"
        "–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å –∏–∑ —Å—Ç–æ–∏—Ü–∏–∑–º–∞ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00.\n\n"
        "üîî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    logger.info(f"–ü–æ–¥–ø–∏—Å–∞–Ω: {chat_id} –≤ TZ {tz}")

# –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in subscribers:
        # —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è
        context.job_queue.get_jobs_by_name(f"quote_{chat_id}")[0].schedule_removal()
        context.job_queue.get_jobs_by_name(f"reflection_{chat_id}")[0].schedule_removal()
        subscribers.pop(chat_id, None)
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        logger.info(f"–û—Ç–ø–∏—Å–∞–Ω: {chat_id}")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞/—Ç–∞–π–º–∑–æ–Ω—ã
async def setcity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ TZ, –Ω–∞–ø—Ä–∏–º–µ—Ä Europe/Moscow
    text = update.message.text.partition(' ')[2].strip()
    if not text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setcity Europe/Moscow")
        return
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∑–æ–Ω—ã
    context.user_data['timezone'] = text
    await update.message.reply_text(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}")
    logger.info(f"TZ –¥–ª—è {update.effective_chat.id} = {text}")

# Main
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("setcity", setcity))

    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
```
