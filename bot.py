import os
import logging
import random
from datetime import datetime, time
from zoneinfo import ZoneInfo
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from stoic_quotes_100 import QUOTES

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = os.getenv("BOT_TOKEN")
users = {}  # chat_id -> timezone

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–∏—Ç–∞—Ç—ã
async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    if chat_id in users:
        quote = random.choice(QUOTES)
        try:
            await context.bot.send_message(chat_id=chat_id, text=quote, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã {chat_id}: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
REFLECTION_TEXT = (
    "üßò‚Äç‚ôÇÔ∏è *–°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è. –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.*\n"
    "–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏. –ù–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã...\n"
    "1Ô∏è‚É£ ...?\n"
    "2Ô∏è‚É£ ...?\n"
    "3Ô∏è‚É£ ...?\n"
    "4Ô∏è‚É£ ...?\n"
    "5Ô∏è‚É£ ...?"
)
async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    try:
        await context.bot.send_message(chat_id=chat_id, text=REFLECTION_TEXT, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ {chat_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[KeyboardButton(c)] for c in ['–ú–æ—Å–∫–≤–∞','–ö–∏–µ–≤','–°–∞–º–∞—Ä–∞','–¢–±–∏–ª–∏—Å–∏','–†–∏–º','–ë–∞—Ä—Å–µ–ª–æ–Ω–∞','–õ–æ–Ω–¥–æ–Ω']]
    await update.message.reply_text(
        "‚û°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True)
    )

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    tz_map = {
        '–ú–æ—Å–∫–≤–∞':'Europe/Moscow', '–ö–∏–µ–≤':'Europe/Kiev', '–°–∞–º–∞—Ä–∞':'Europe/Samara',
        '–¢–±–∏–ª–∏—Å–∏':'Asia/Tbilisi','–†–∏–º':'Europe/Rome','–ë–∞—Ä—Å–µ–ª–æ–Ω–∞':'Europe/Madrid','–õ–æ–Ω–¥–æ–Ω':'Europe/London'
    }
    if city not in tz_map:
        await update.message.reply_text('–ì–æ—Ä–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        return
    tz = tz_map[city]
    chat_id = update.effective_chat.id
    users[chat_id] = tz
    # —Å–±—Ä–æ—Å —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    app = context.application
    app.job_queue.get_jobs_by_name(f"quote_{chat_id}") and [job.schedule_removal() for job in app.job_queue.get_jobs_by_name(f"quote_{chat_id}")]
    app.job_queue.get_jobs_by_name(f"refl_{chat_id}") and [job.schedule_removal() for job in app.job_queue.get_jobs_by_name(f"refl_{chat_id}")]
    # –Ω–æ–≤—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    tzinfo = ZoneInfo(tz)
    app.job_queue.run_daily(send_quote, time=time(9,0,tzinfo=tzinfo), chat_id=chat_id, name=f"quote_{chat_id}")
    app.job_queue.run_daily(send_reflection, time=time(12,0,tzinfo=tzinfo), days=(6,), chat_id=chat_id, name=f"refl_{chat_id}")
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        "‚úÖ –ì–æ—Ç–æ–≤–æ!\n–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å –∏–∑ —Å—Ç–æ–∏—Ü–∏–∑–º–∞ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00.\n"
        "üîî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
        parse_mode='Markdown'
    )
    logger.info(f"–ü–æ–¥–ø–∏—Å–∞–Ω: {chat_id} TZ={tz}")

# –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in users:
        users.pop(chat_id)
        for job in context.application.job_queue.get_jobs_by_name(f"quote_{chat_id}") + context.application.job_queue.get_jobs_by_name(f"refl_{chat_id}"):
            job.schedule_removal()
        await update.message.reply_text('‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã.')
    else:
        await update.message.reply_text('–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω.')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_city))
    app.add_handler(CommandHandler('stop', stop))
    app.run()  # run() –≤–º–µ—Å—Ç–æ run_polling() –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞

if __name__ == '__main__':
    main()
