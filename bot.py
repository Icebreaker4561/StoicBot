import os
import logging
import random
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
from stoic_quotes_100 import QUOTES
from datetime import datetime

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = os.getenv("BOT_TOKEN")
subscribers = set()

# –¶–∏—Ç–∞—Ç—ã
async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    logger.info("üîÅ –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è send_quote")
    if not subscribers:
        logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ü–∏—Ç–∞—Ç")
        return
    quote = random.choice(QUOTES)
    for chat_id in subscribers:
        try:
            await context.bot.send_message(chat_id=chat_id, text=quote, parse_mode='HTML')
            logger.info(f"‚úÖ –¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã –≤ —á–∞—Ç {chat_id}: {e}")

# –†–µ—Ñ–ª–µ–∫—Å–∏—è
REFLECTION_TEXT = (
    "<b>üß† –ù–µ–¥–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è</b>\n"
    "<i>üëâ –í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —è –ø–æ–∑–≤–æ–ª–∏–ª —ç–º–æ—Ü–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö, –∏ –∫–∞–∫ —è –º–æ–≥ –±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –º—É–¥—Ä–æ?</i>\n"
    "<i>üëâ –ö–∞–∫–∏–µ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º, –∞ –∫–∞–∫–∏–µ –µ–º—É –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–ª–∏?</i>\n"
    "<i>üëâ –ß—Ç–æ –∏–∑ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ–¥?</i>\n"
    "<i>üëâ –ö–æ–≥–¥–∞ —è —É–ø—É—Å—Ç–∏–ª —à–∞–Ω—Å –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º?</i>\n"
    "<i>üëâ –ö–∞–∫–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–ª–∏ –º–æ–∏–º —Ä–æ—Å—Ç–æ–º?</i>"
)

async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    logger.info("üîÅ –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è send_reflection")
    if not subscribers:
        logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
        return
    for chat_id in subscribers:
        try:
            await context.bot.send_message(chat_id=chat_id, text=REFLECTION_TEXT, parse_mode='HTML')
            logger.info(f"‚úÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –≤ —á–∞—Ç {chat_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    subscribers.add(chat_id)
    logger.info(f"üì• –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id}")
    await update.message.reply_text(
        "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ stoic-—Ü–∏—Ç–∞—Ç—ã –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é. –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥."
    )

# –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        logger.info(f"üì§ –ü–æ–¥–ø–∏—Å—á–∏–∫ —É–¥–∞–ª—ë–Ω: {chat_id}")
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# –ó–∞–ø—É—Å–∫
import asyncio
from telegram.ext import Application

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    app: Application = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))

    app.job_queue.run_repeating(send_quote, interval=30, first=5)
    app.job_queue.run_repeating(send_reflection, interval=30, first=15)

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª

if __name__ == "__main__":
    asyncio.run(main())
