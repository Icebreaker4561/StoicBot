import os
import random
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from stoic_quotes_100 import QUOTES

BOT_TOKEN = os.getenv("BOT_TOKEN")

TIMEZONES = {
    "–õ–æ–Ω–¥–æ–Ω": 1,
    "–†–∏–º": 2,
    "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞": 2,
    "–ö–∏–µ–≤": 3,
    "–ú–æ—Å–∫–≤–∞": 3,
    "–°–∞–º–∞—Ä–∞": 4,
    "–¢–±–∏–ª–∏—Å–∏": 4
}

users = {}

app = ApplicationBuilder().token(BOT_TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[city] for city in TIMEZONES.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    welcome_text = (
        "‚è∞ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–æ–∏—á–µ—Å–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã —Ä–æ–≤–Ω–æ –≤ 9 —É—Ç—Ä–∞ –ø–æ –≤–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏,\n"
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    )

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_city_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_city = update.message.text
    chat_id = update.message.chat_id

    if user_city in TIMEZONES:
        timezone = TIMEZONES[user_city]
        users[chat_id] = timezone
        await update.message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ {user_city}."
        )
    else:
        await update.message.reply_text(
            "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏."
        )

async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[city] for city in TIMEZONES.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=reply_markup
    )

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if chat_id in users:
        del users[chat_id]
        await update.message.reply_text("üõë –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ —Ü–∏—Ç–∞—Ç.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –í—ã –µ—â—ë –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å—Ç–æ–∏—á–µ—Å–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 —É—Ç—Ä–∞ –ø–æ –≤–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/setcity ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

async def send_daily_quotes():
    now_utc = datetime.utcnow()
    for chat_id, timezone_offset in users.items():
        user_time = now_utc + timedelta(hours=timezone_offset)
        # !!! –í–†–ï–ú–ï–ù–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ü–∏—Ç–∞—Ç—É –ö–ê–ñ–î–£–Æ –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∞ !!!
        if True:
            quote = random.choice(QUOTES)
            try:
                await app.bot.send_message(chat_id=chat_id, text=quote, parse_mode="HTML")
                print(f"–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

scheduler = AsyncIOScheduler()
scheduler.add_job(send_daily_quotes, "interval", minutes=1)
scheduler.start()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("setcity", set_city))
app.add_handler(CommandHandler("stop", stop))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city_choice))

if __name__ == "__main__":
    app.run_polling()