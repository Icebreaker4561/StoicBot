import os
import logging
import random
from datetime import time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from stoic_quotes_100 import QUOTES  # –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")

# –ó–¥–µ—Å—å –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å chat_id ‚Üí –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ (–ø–æ—Ç–æ–º ‚Äî –∏ TZ)
subscribers: dict[int, str] = {}

# ‚Äî‚Äî‚Äî –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî‚Äî‚Äî

async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in subscribers:
        quote = random.choice(QUOTES)
        await context.bot.send_message(chat_id, quote)

async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üßò‚Äç‚ôÇÔ∏è *–°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è*\n"
        "_–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏, –Ω–∞–π–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É —Ç–∏—à–∏–Ω—ã_\n\n"
        "1Ô∏è‚É£ –ì–¥–µ —ç–º–æ—Ü–∏–∏ –ø–æ–±–µ–¥–∏–ª–∏ —Ä–∞–∑—É–º?\n"
        "2Ô∏è‚É£ –ß—Ç–æ —à–ª–æ –≤—Ä–∞–∑—Ä–µ–∑ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º?\n"
        "3Ô∏è‚É£ –ß—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ —á–µ—Ä–µ–∑ –≥–æ–¥?\n"
        "4Ô∏è‚É£ –ö–æ–≥–æ —è –º–æ–≥ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å, –Ω–æ –Ω–µ —Å–¥–µ–ª–∞–ª —ç—Ç–æ–≥–æ?\n"
        "5Ô∏è‚É£ –ö–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å—Ç–∞–ª–∏ –≤–∞—à–∏–º —Ä–æ—Å—Ç–æ–º?"
    )
    for chat_id in subscribers:
        await context.bot.send_message(chat_id, text, parse_mode="Markdown")

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ‚Äî‚Äî‚Äî

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    cities = ["–õ–µ—Ä–º–æ–Ω—Ç–æ–≤","–ë–∞—Ç—É–º–∏","–î—é—Å—Å–µ–ª—å–¥–æ—Ä—Ñ","–ö–∏–µ–≤","–ë–∞—Ä—Å–µ–ª–æ–Ω–∞","–õ–∏—Å—Å–∞–±–æ–Ω"]
    kb = [[c] for c in cities]
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å üëá",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True),
    )

async def setcity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    city = update.message.text.strip()
    if city not in ["–õ–µ—Ä–º–æ–Ω—Ç–æ–≤","–ë–∞—Ç—É–º–∏","–î—é—Å—Å–µ–ª—å–¥–æ—Ä—Ñ","–ö–∏–µ–≤","–ë–∞—Ä—Å–µ–ª–æ–Ω–∞","–õ–∏—Å—Å–∞–±–æ–Ω"]:
        return await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    subscribers[chat_id] = city
    await update.message.reply_text(
        "‚úÖ –ì–æ—Ç–æ–≤–æ!\n"
        "–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å –æ—Ç —Å—Ç–æ–∏–∫–æ–≤ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 11:05 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞ "
        f"({city}).\n\n"
        "üîî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
    )

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if subscribers.pop(chat_id, None):
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥\n"
        "/setcity ‚Äî –ø–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥\n"
        "/stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/share ‚Äî —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –±–æ—Ç–µ\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    )

async def share(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º üôè :)\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É üëá"
    )
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –•–æ—á—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±–µ –∫–ª–∞—Å—Å–Ω–æ–≥–æ –±–æ—Ç–∞. "
        "–û–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–¥–Ω—É —Å—Ç–æ–∏—á–µ—Å–∫—É—é –º—ã—Å–ª—å. "
        "–ú–Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: https://t.me/StoicTalesBot_dev_bot?start"
    )

# ‚Äî‚Äî‚Äî –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî‚Äî‚Äî

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setcity", setcity))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("share", share))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: —Ü–∏—Ç–∞—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 11:15 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    app.job_queue.run_daily(send_quote, time=time(hour=11, minute=15), days=(0,1,2,3,4,5,6))

    # –†–µ—Ñ–ª–µ–∫—Å–∏—è –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 12:00
    app.job_queue.run_daily(send_reflection, time=time(hour=12, minute=0), days=(6,))

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    app.run_polling()

if __name__ == "__main__":
    main()