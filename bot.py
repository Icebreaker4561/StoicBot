import os
import logging
import random
import sqlite3
from datetime import datetime, time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from stoic_quotes_100 import QUOTES

# Logging setup
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# Database helper
DB_PATH = "/data/subscribers.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "CREATE TABLE IF NOT EXISTS subs (chat_id INTEGER PRIMARY KEY, city TEXT)"
    )
    conn.commit()
    conn.close()

async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    for chat_id, city in cur.execute("SELECT chat_id, city FROM subs"):  # noqa
        quote = random.choice(QUOTES)
        try:
            logger.info(f"Sending quote to {chat_id} ({city})")
            await context.bot.send_message(chat_id, quote)
        except Exception as e:
            logger.error(f"Error sending quote to {chat_id}: {e}")
    conn.close()

async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    # ... weekly reflection logic here
    pass

# /start command: ask user to pick city
def build_city_keyboard():
    cities = ['–õ–µ—Ä–º–æ–Ω—Ç–æ–≤', '–ë–∞—Ç—É–º–∏', '–î—é—Å—Å–µ–ª—å–¥–æ—Ä—Ñ', '–ö–∏–µ–≤', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞', '–õ–∏—Å—Å–∞–±–æ–Ω']
    return ReplyKeyboardMarkup(
        [[c] for c in cities], one_time_keyboard=True, resize_keyboard=True
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/start invoked by {update.effective_chat.id}")
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å üëá",
        reply_markup=build_city_keyboard()
    )

# Handle city selection and subscribe
async def setcity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    city = update.message.text.strip()
    if city not in ['–õ–µ—Ä–º–æ–Ω—Ç–æ–≤', '–ë–∞—Ç—É–º–∏', '–î—é—Å—Å–µ–ª—å–¥–æ—Ä—Ñ', '–ö–∏–µ–≤', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞', '–õ–∏—Å—Å–∞–±–æ–Ω']:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    logger.info(f"Subscribing {chat_id} for city {city}")
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "REPLACE INTO subs (chat_id, city) VALUES (?, ?)", (chat_id, city)
    )
    conn.commit()
    conn.close()
    await update.message.reply_text(
        "‚úÖ –ì–æ—Ç–æ–≤–æ!\n"
        f"–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å –æ—Ç —Å—Ç–æ–∏–∫–æ–≤ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞ {city}.\n\n"
        "üîî‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
    )

# Other commands (/stop, /help, /share) defined similarly...
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("DELETE FROM subs WHERE chat_id = ?", (chat_id,))
    conn.commit()
    conn.close()
    await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥\n"
        "/stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/share ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"
    )

async def share(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º üôè :)\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É üëá"
    )
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –•–æ—á—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±–µ –∫–ª–∞—Å—Å–Ω–æ–≥–æ –±–æ—Ç–∞. "
        "–û–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–¥–Ω—É —Å—Ç–æ–∏—á–µ—Å–∫—É—é –º—ã—Å–ª—å. "
        "–ú–Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: https://t.me/StoicTalesBot_dev_bot?start"
    )

# Main
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞‚Ä¶")
    init_db()
    token = os.getenv('BOT_TOKEN')
    app = ApplicationBuilder().token(token).build()

    # Handlers
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.Regex('^(–õ–µ—Ä–º–æ–Ω—Ç–æ–≤|–ë–∞—Ç—É–º–∏|–î—é—Å—Å–µ–ª—å–¥–æ—Ä—Ñ|–ö–∏–µ–≤|–ë–∞—Ä—Å–µ–ª–æ–Ω–∞|–õ–∏—Å—Å–∞–±–æ–Ω)$'), setcity))
    app.add_handler(CommandHandler('stop', stop))
    app.add_handler(CommandHandler('help', help_cmd))
    app.add_handler(CommandHandler('share', share))

    # Scheduler
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è")
    app.job_queue.run_daily(send_quote, time=time(hour=9, minute=0))
    app.job_queue.run_daily(send_reflection, time=time(hour=12, minute=0), days='sat')

    await app.run_polling()

if __name__ == '__main__':
    import asyn–∞cio
    asyncio.run(main())