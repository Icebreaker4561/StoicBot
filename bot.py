import os
import logging
import random
from datetime import time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from stoic_quotes_100 import QUOTES

# Logging setup
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# Bot token from environment
TOKEN = os.getenv("BOT_TOKEN")

# In-memory subscribers: chat_id -> city
subscribers = {}

# Send a random quote
async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    for chat_id, city in subscribers.items():
        quote = random.choice(QUOTES)
        try:
            await context.bot.send_message(
                chat_id,
                f"<b>–°—Ç–æ–∏—á–µ—Å–∫–∞—è –º—ã—Å–ª—å:</b>\n{quote}",
                parse_mode="HTML",
            )
            logger.info(f"Sent quote to {chat_id} ({city})")
        except Exception as e:
            logger.error(f"Error sending quote to {chat_id}: {e}")

# Weekly reflection text
REFLECTION_TEXT = (
    "üßò‚Äç‚ôÇÔ∏è <b>–°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è</b>\n"
    "–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏. –ù–∞–π–¥–∏—Ç–µ 5‚Äì10 –º–∏–Ω—É—Ç –¥–ª—è —á–µ—Å—Ç–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:\n"
    "1Ô∏è‚É£ –í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —è –ø–æ–∑–≤–æ–ª–∏–ª —ç–º–æ—Ü–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö –Ω–∞–¥ —Ä–∞–∑—É–º–æ–º?\n"
    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º, –∞ –∫–∞–∫–∏–µ –Ω–µ—Ç?\n"
    "3Ô∏è‚É£ –ß—Ç–æ –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ —è —Å—á–∏—Ç–∞–ª –≤–∞–∂–Ω—ã–º, –±—É–¥–µ—Ç –≤–∞–∂–Ω–æ —á–µ—Ä–µ–∑ –≥–æ–¥?\n"
    "4Ô∏è‚É£ –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º —è —É–ø—É—Å—Ç–∏–ª?\n"
    "5Ô∏è‚É£ –ö–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —è —Å–º–æ–≥ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ —Ä–æ—Å—Ç, –∞ —á–µ–º—É –µ—â–µ –Ω—É–∂–Ω–æ –Ω–∞—É—á–∏—Ç—å—Å—è?"
)

async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    for chat_id, city in subscribers.items():
        try:
            await context.bot.send_message(
                chat_id,
                REFLECTION_TEXT,
                parse_mode="HTML",
            )
            logger.info(f"Sent reflection to {chat_id} ({city})")
        except Exception as e:
            logger.error(f"Error sending reflection to {chat_id}: {e}")

# /start: ask to choose city
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    cities = ['–õ–µ—Ä–º–æ–Ω—Ç–æ–≤','–ë–∞—Ç—É–º–∏','–î—é—Å—Å–µ–ª—å–¥–æ—Ä—Ñ','–ö–∏–µ–≤','–ë–∞—Ä—Å–µ–ª–æ–Ω–∞','–õ–∏—Å—Å–∞–±–æ–Ω']
    keyboard = [[c] for c in cities]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å üëá",
        reply_markup=reply_markup,
    )
    logger.info(f"Prompted city selection for {chat_id}")

# /setcity or city name handler
def is_city(text: str):
    return text in ['–õ–µ—Ä–º–æ–Ω—Ç–æ–≤','–ë–∞—Ç—É–º–∏','–î—é—Å—Å–µ–ª—å–¥–æ—Ä—Ñ','–ö–∏–µ–≤','–ë–∞—Ä—Å–µ–ª–æ–Ω–∞','–õ–∏—Å—Å–∞–±–æ–Ω']

async def setcity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    city = update.message.text.strip()
    if not is_city(city):
        return
    subscribers[chat_id] = city
    await update.message.reply_text(
        "‚úÖ –ì–æ—Ç–æ–≤–æ!\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å –æ—Ç —Å—Ç–æ–∏–∫–æ–≤ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 11:25 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞ {city}.\n\n"
        "üîî‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    logger.info(f"Subscribed {chat_id} for city {city}")

# /stop: unsubscribe
def unregister(chat_id: int):
    return subscribers.pop(chat_id, None)

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if unregister(chat_id):
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        logger.info(f"Unsubscribed {chat_id}")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# /help
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥\n"
        "/stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/share ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"
    )

# /share
async def share(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º üôè :)\n"  
        "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É üëá"
    )
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –•–æ—á—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±–µ –∫–ª–∞—Å—Å–Ω–æ–≥–æ –±–æ—Ç–∞. "
        "–û–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–¥–Ω—É —Å—Ç–æ–∏—á–µ—Å–∫—É—é –º—ã—Å–ª—å. "
        "–ú–Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: https://t.me/StoicTalesBot_dev_bot?start"
    )
    logger.info(f"Share prompt sent to {update.effective_chat.id}")

# Main
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    # Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, setcity))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("share", share))
    # Schedule jobs: daily at 11:05 and weekly Sunday at 12:00
    app.job_queue.run_daily(send_quote, time=time(hour=11, minute=25), days=(0,1,2,3,4,5,6))
    app.job_queue.run_daily(send_reflection, time=time(hour=12, minute=0), days=(6,))
    app.run_polling()
