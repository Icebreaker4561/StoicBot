```python
import os
import logging
import random
from datetime import time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from stoic_quotes_100 import QUOTES
import pytz

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: chat_id -> tz
TOKEN = os.getenv("BOT_TOKEN")
subscribers: dict[int, str] = {}

# –ö–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
CITIES = {
    "–ú–æ—Å–∫–≤–∞": "Europe/Moscow",
    "–¢–±–∏–ª–∏—Å–∏": "Asia/Tbilisi",
    "–†–∏–º": "Europe/Rome",
    "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞": "Europe/Madrid",
    "–õ–æ–Ω–¥–æ–Ω": "Europe/London",
    "–ö–∏–µ–≤": "Europe/Kiev",
    "–°–∞–º–∞—Ä–∞": "Europe/Samara",
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–∏—Ç–∞—Ç—ã
async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    for chat_id, tz in subscribers.items():
        try:
            quote = random.choice(QUOTES)
            await context.bot.send_message(chat_id, text=quote, parse_mode='HTML')
            logger.info(f"Quote sent to {chat_id}")
        except Exception as e:
            logger.error(f"Failed to send quote to {chat_id}: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
REFLECTION = (
    "üßò‚Äç‚ôÇÔ∏è *–°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è. –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.*\n"
    "_–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏. –ù–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã, —á—Ç–æ–±—ã —á–µ—Å—Ç–Ω–æ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –ø—Ä–æ–∂–∏—Ç—É—é –Ω–µ–¥–µ–ª—é._\n\n"
    "1Ô∏è‚É£ –í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —è –ø–æ–∑–≤–æ–ª–∏–ª —ç–º–æ—Ü–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö –Ω–∞–¥ —Ä–∞–∑—É–º–æ–º, –∏ –∫–∞–∫ –º–æ–≥ –±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –º—É–¥—Ä–æ?\n"
    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º, –∞ –∫–∞–∫–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–ª–∏ –∏–º?\n"
    "3Ô∏è‚É£ –ß—Ç–æ –∏–∑ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ–¥?\n"
    "4Ô∏è‚É£ –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª—É–∂–∏—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º —è —É–ø—É—Å—Ç–∏–ª?\n"
    "5Ô∏è‚É£ –ö–∞–∫–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è —Ä–æ—Å—Ç–∞, –∞ –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ —É–ø—É—Å—Ç–∏–ª?"
)

async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    for chat_id, tz in subscribers.items():
        try:
            await context.bot.send_message(chat_id, text=REFLECTION, parse_mode='MarkdownV2')
            logger.info(f"Reflection sent to {chat_id}")
        except Exception as e:
            logger.error(f"Failed to send reflection to {chat_id}: {e}")

# /start - –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[city] for city in CITIES]
    reply = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=reply,
    )
    logger.info(f"Asked {update.effective_chat.id} to choose city")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ MessageHandler
async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    chat_id = update.effective_chat.id
    if city in CITIES:
        tz = CITIES[city]
        subscribers[chat_id] = tz
        await update.message.reply_text(
            "‚úÖ –ì–æ—Ç–æ–≤–æ!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å –∏–∑ —Å—Ç–æ–∏—Ü–∏–∑–º–∞ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00 –ø–æ –≤–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            "üîî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
            parse_mode='MarkdownV2',
        )
        logger.info(f"Subscribed {chat_id} with tz {tz}")
    else:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# /stop - –æ—Ç–ø–∏—Å–∫–∞
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in subscribers:
        subscribers.pop(chat_id)
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        logger.info(f"Unsubscribed {chat_id}")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def schedule_jobs(app):
    for chat_id, tz in subscribers.items():
        timezone = pytz.timezone(tz)
        app.job_queue.run_daily(
            send_quote,
            time=time(9, 0),
            tzinfo=timezone,
            name=f"quote_{chat_id}",
            chat_id=chat_id,
        )
        app.job_queue.run_daily(
            send_reflection,
            time=time(12, 0),
            days=(6,),  # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            tzinfo=timezone,
            name=f"ref_{chat_id}",
            chat_id=chat_id,
        )

# main
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_city))

    # –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–∏–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    app.job_queue.run_once(lambda ctx: schedule_jobs(app), when=1)

    app.run_polling()

if __name__ == '__main__':
    main()
```
