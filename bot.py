import os
import logging
import random
from datetime import time
import asyncio

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from stoic_quotes_100 import QUOTES

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ ENV
TOKEN = os.getenv("BOT_TOKEN")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: chat_id -> city
subscribers: dict[int,str] = {}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    for chat_id, city in subscribers.items():
        quote = random.choice(QUOTES)
        try:
            await context.bot.send_message(
                chat_id,
                quote,
                parse_mode="HTML"
            )
            logger.info(f"Sent daily quote to {chat_id} (city={city})")
        except Exception as e:
            logger.error(f"Error sending daily quote to {chat_id}: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
REFLECTION_TEXT = (
    "üßò‚Äç‚ôÇÔ∏è <b>–°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è</b>\n"
    "<i>–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏. –ù–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã...</i>\n\n"
    "1Ô∏è‚É£ –í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —è –ø–æ–∑–≤–æ–ª–∏–ª —ç–º–æ—Ü–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö –Ω–∞–¥ —Ä–∞–∑—É–º–æ–º?\n"
    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º, –∞ –∫–∞–∫–∏–µ ‚Äî –Ω–µ—Ç?\n"
    "3Ô∏è‚É£ –ß—Ç–æ –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ —è —Å—á–∏—Ç–∞–ª –≤–∞–∂–Ω—ã–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ–¥?\n"
    "4Ô∏è‚É£ –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª—É–∂–∏—Ç—å –¥—Ä—É–≥–∏–º —è —É–ø—É—Å—Ç–∏–ª?\n"
    "5Ô∏è‚É£ –ö–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —è —Å–º–æ–≥ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞?"
)
async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in subscribers:
        try:
            await context.bot.send_message(
                chat_id,
                REFLECTION_TEXT,
                parse_mode="HTML"
            )
            logger.info(f"Sent weekly reflection to {chat_id}")
        except Exception as e:
            logger.error(f"Error sending reflection to {chat_id}: {e}")

# /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    cities = ['–õ–µ—Ä–º–æ–Ω—Ç–æ–≤', '–ë–∞—Ç—É–º–∏', '–î—é—Å—Å–µ–ª—å–¥–æ—Ä—Ñ', '–ö–∏–µ–≤', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞', '–õ–∏—Å—Å–∞–±–æ–Ω']
    keyboard = [[c] for c in cities]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        one_time_keyboard=True,
        resize_keyboard=True
    )
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å üëá",
        reply_markup=reply_markup
    )
    logger.info(f"Prompted city selection for {chat_id}")

# –õ–æ–≤–∏–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
async def setcity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    city = update.message.text.strip()
    if city not in ['–õ–µ—Ä–º–æ–Ω—Ç–æ–≤', '–ë–∞—Ç—É–º–∏', '–î—é—Å—Å–µ–ª—å–¥–æ—Ä—Ñ', '–ö–∏–µ–≤', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞', '–õ–∏—Å—Å–∞–±–æ–Ω']:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    subscribers[chat_id] = city
    await update.message.reply_text(
        f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n"
        f"–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å –æ—Ç —Å—Ç–æ–∏–∫–æ–≤ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞ ({city}).\n\n"
        "üîî‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    logger.info(f"Subscribed {chat_id} for city {city}")

# /stop ‚Äî –æ—Ç–ø–∏—Å–∫–∞
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in subscribers:
        subscribers.pop(chat_id)
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        logger.info(f"Unsubscribed {chat_id}")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# /help
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥\n"
        "/stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "/share ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    logger.info(f"Help requested by {update.effective_chat.id}")

# /share
async def share(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º üôè :)\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É üëá"
    )
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –•–æ—á—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±–µ –∫–ª–∞—Å—Å–Ω–æ–≥–æ –±–æ—Ç–∞. "
        "–û–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–¥–Ω—É —Å—Ç–æ–∏—á–µ—Å–∫—É—é –º—ã—Å–ª—å. "
        "–ú–Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: https://t.me/StoicTalesBot?start"
    )
    logger.info(f"Share messages sent to {update.effective_chat.id}")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞‚Ä¶")
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("share", share))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, setcity))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –≤ 9:00
    app.job_queue.run_daily(send_quote, time=time(hour=9, minute=0))
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –≤ —Å—É–±–±–æ—Ç—É (–¥–µ–Ω—å 6) –≤ 12:00
    app.job_queue.run_daily(send_reflection, time=time(hour=12, minute=0), days=(6,))

    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())