import os
import logging
import random
import asyncio
from datetime import time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from stoic_quotes_100 import QUOTES

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s ‚Äì %(name)s ‚Äì %(levelname)s ‚Äì %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
subscribers = {}  # chat_id -> timezone string, –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–∏—Ç–∞—Ç—ã
async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in subscribers.keys():
        quote = random.choice(QUOTES)
        try:
            await context.bot.send_message(chat_id, quote, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã {chat_id}: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
REFLECTION = (
    "üßò‚Äç‚ôÇÔ∏è *–°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è*\n"
    "_–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏. –ù–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã._\n\n"
    "1Ô∏è‚É£ –í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —è –ø–æ–∑–≤–æ–ª–∏–ª —ç–º–æ—Ü–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö –Ω–∞–¥ —Ä–∞–∑—É–º–æ–º?\n"
    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º, –∞ –∫–∞–∫–∏–µ ‚Äî –Ω–µ—Ç?\n"
    "3Ô∏è‚É£ –ß—Ç–æ –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ —è —Å—á–∏—Ç–∞–ª –≤–∞–∂–Ω—ã–º, –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ–¥?\n"
    "4Ô∏è‚É£ –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º —è —É–ø—É—Å—Ç–∏–ª?\n"
    "5Ô∏è‚É£ –ö–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ —è —Å–º–æ–≥ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ —Ä–æ—Å—Ç?"
)

async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in subscribers.keys():
        try:
            await context.bot.send_message(
                chat_id,
                REFLECTION,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ {chat_id}: {e}")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    subscribers[chat_id] = None  # –º–æ–∂–µ–º –ø–æ–∑–∂–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    await update.message.reply_text(
        "‚úÖ –ì–æ—Ç–æ–≤–æ!\n"
        "–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å –∏–∑ —Å—Ç–æ–∏—Ü–∏–∑–º–∞ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00.\n\n"
        "üîî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    logger.info(f"–ü–æ–¥–ø–∏—Å–∞–ª—Å—è: {chat_id}")

# /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in subscribers:
        subscribers.pop(chat_id, None)
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã.")
        logger.info(f"–û—Ç–ø–∏—Å–∞–ª—Å—è: {chat_id}")
    else:
        await update.message.reply_text("–í—ã –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –≤ 09:00
    app.job_queue.run_daily(
        send_quote,
        time=time(hour=9, minute=0),
        days=(0,1,2,3,4,5,6),
    )
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 12:00
    app.job_queue.run_daily(
        send_reflection,
        time=time(hour=12, minute=0),
        days=(6,),
    )

    # –î–ª—è Render: –∏—Å–ø–æ–ª—å–∑—É–µ–º .run(), –∞ –Ω–µ .run_polling()
    app.run()

if __name__ == "__main__":
    main()