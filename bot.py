import os
import logging
import random
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from stoic_quotes_100 import QUOTES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (chat_id)
subscribers = set()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã
async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    if not subscribers:
        return
    quote = random.choice(QUOTES)
    for chat_id in list(subscribers):
        try:
            await context.bot.send_message(chat_id=chat_id, text=quote, parse_mode='HTML')
            logger.info(f"Quote sent to {chat_id}")
        except Exception as e:
            logger.error(f"Failed to send quote to {chat_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
REFLECTION_TEXT = (
    "üßò‚Äç‚ôÇÔ∏è <b>–°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è. –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.</b>\n"
    "–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏. –ù–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã, —á—Ç–æ–±—ã —á–µ—Å—Ç–Ω–æ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –ø—Ä–æ–∂–∏—Ç—É—é –Ω–µ–¥–µ–ª—é. –û—Ç–≤–µ—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã ‚Äî –Ω–æ –æ–Ω–∏ –º–æ–≥—É—Ç –º–Ω–æ–≥–æ–µ –∏–∑–º–µ–Ω–∏—Ç—å.\n\n"
    "1Ô∏è‚É£ <i>–í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —è –ø–æ–∑–≤–æ–ª–∏–ª —ç–º–æ—Ü–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö –Ω–∞–¥ —Ä–∞–∑—É–º–æ–º, –∏ –∫–∞–∫ –º–æ–≥ –±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –º—É–¥—Ä–æ, –º—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∏ —É–º–µ—Ä–µ–Ω–Ω–æ?</i>\n"
    "2Ô∏è‚É£ <i>–ö–∞–∫–∏–µ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º –∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º, –∞ –∫–∞–∫–∏–µ —à–ª–∏ –≤—Ä–∞–∑—Ä–µ–∑ —Å –Ω–∏–º–∏?</i>\n"
    "3Ô∏è‚É£ <i>–ß—Ç–æ –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ —è —Å—á–∏—Ç–∞–ª –≤–∞–∂–Ω—ã–º –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ–¥?</i>\n"
    "4Ô∏è‚É£ <i>–ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª—É–∂–∏—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º —è —É–ø—É—Å—Ç–∏–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?</i>\n"
    "5Ô∏è‚É£ <i>–ö–∞–∫–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ —è —Å–º–æ–≥ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞, –∞ –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ —É–ø—É—Å—Ç–∏–ª?</i>"
)

async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    if not subscribers:
        return
    for chat_id in list(subscribers):
        try:
            await context.bot.send_message(chat_id=chat_id, text=REFLECTION_TEXT, parse_mode='HTML')
            logger.info(f"Reflection sent to {chat_id}")
        except Exception as e:
            logger.error(f"Failed to send reflection to {chat_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    subscribers.add(chat_id)
    text = (
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–æ–∏—á–µ—Å–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.\n"
        "üîî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É."
    )
    await update.message.reply_text(text, parse_mode='HTML')
    logger.info(f"Subscribed: {chat_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        logger.info(f"Unsubscribed: {chat_id}")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    TOKEN = os.getenv('BOT_TOKEN')
    if not TOKEN:
        logger.error('Environment variable BOT_TOKEN is not set')
        exit(1)

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('stop', stop))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á: —Ü–∏—Ç–∞—Ç—ã –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    job_queue = app.job_queue
    job_queue.run_repeating(send_quote, interval=30, first=0)
    job_queue.run_repeating(send_reflection, interval=30, first=15)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info('Bot started')
    app.run_polling()
