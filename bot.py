import os
import logging
import random
from datetime import datetime
from zoneinfo import ZoneInfo
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from stoic_quotes_100 import QUOTES

# Logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot token
TOKEN = os.getenv("BOT_TOKEN")

# Subscribers: chat_id -> timezone string
subscribers = {}

# Mapping city names to timezones
CITY_TZ = {
    "–ú–æ—Å–∫–≤–∞": "Europe/Moscow",
    "–¢–±–∏–ª–∏—Å–∏": "Asia/Tbilisi",
    "–†–∏–º": "Europe/Rome",
    "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞": "Europe/Madrid",
    "–õ–æ–Ω–¥–æ–Ω": "Europe/London",
    "–ö–∏–µ–≤": "Europe/Kyiv",
    "–°–∞–º–∞—Ä–∞": "Europe/Samara"
}

# Scheduled job: runs every minute
async def scheduled_task(context: ContextTypes.DEFAULT_TYPE):
    for chat_id, tz_name in subscribers.items():
        try:
            tz = ZoneInfo(tz_name)
            now = datetime.now(tz)
            # Send quote at 09:00
            if now.hour == 9 and now.minute == 0:
                quote = random.choice(QUOTES)
                await context.bot.send_message(chat_id, quote)
                logger.info(f"Sent quote to {chat_id} at {now.time()} [{tz_name}]")
            # Send reflection on Sunday (weekday=6) at 12:00
            if now.weekday() == 6 and now.hour == 12 and now.minute == 0:
                reflection = (
                    "üßò‚Äç‚ôÇÔ∏è –°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è. –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.\n"
                    "–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏. –ù–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã...\n"
                    "1Ô∏è‚É£ –í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —è –ø–æ–∑–≤–æ–ª–∏–ª —ç–º–æ—Ü–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö –Ω–∞–¥ —Ä–∞–∑—É–º–æ–º...\n"
                    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º...\n"
                    "3Ô∏è‚É£ –ß—Ç–æ –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ —è —Å—á–∏—Ç–∞–ª –≤–∞–∂–Ω—ã–º –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ,\n    –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ–¥?\n"
                    "4Ô∏è‚É£ –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª—É–∂–∏—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º —è —É–ø—É—Å—Ç–∏–ª?\n"
                    "5Ô∏è‚É£ –ö–∞–∫–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —è —Å–º–æ–≥ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ —Ä–æ—Å—Ç,\n    –∞ –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ —É–ø—É—Å—Ç–∏–ª?"
                )
                await context.bot.send_message(chat_id, reflection)
                logger.info(f"Sent reflection to {chat_id} at {now.time()} [{tz_name}]")
        except Exception as e:
            logger.error(f"Error scheduling for {chat_id}: {e}")

# /start command: ask to choose city
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[city] for city in CITY_TZ.keys()]
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
    logger.info(f"Asking city for {update.effective_chat.id}")

# Handle city selection
async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    city = update.message.text.strip()
    if city in CITY_TZ:
        subscribers[chat_id] = CITY_TZ[city]
        await update.message.reply_text(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å –∏–∑ —Å—Ç–æ–∏—Ü–∏–∑–º–∞ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00.\n"
            f"\nüîî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        logger.info(f"Subscribed {chat_id} with TZ {CITY_TZ[city]}")
    else:
        await update.message.reply_text(
            "–ì–æ—Ä–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        logger.warning(f"Unknown city from {chat_id}: {city}")

# /stop command: unsubscribe
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in subscribers:
        subscribers.pop(chat_id, None)
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        logger.info(f"Unsubscribed {chat_id}")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# Main function
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_city))

    app.job_queue.run_repeating(scheduled_task, interval=60, first=10)

    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
