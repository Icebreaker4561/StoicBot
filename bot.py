import os
import logging
import random
from datetime import time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from stoic_quotes_100 import QUOTES

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: chat_id -> timezone string
users_tz = {}
subscribers = set()

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏ TZ
CITY_TZ = {
    '–ú–æ—Å–∫–≤–∞': 'Europe/Moscow',
    '–ö–∏–µ–≤': 'Europe/Kiev',
    '–¢–±–∏–ª–∏—Å–∏': 'Asia/Tbilisi',
    '–†–∏–º': 'Europe/Rome',
    '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞': 'Europe/Madrid',
    '–°–∞–º–∞—Ä–∞': 'Europe/Samara'
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–∏—Ç–∞—Ç—ã
async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in list(subscribers):
        tz = users_tz.get(chat_id)
        if not tz:
            continue
        quote = random.choice(QUOTES)
        try:
            await context.bot.send_message(chat_id=chat_id, text=quote, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã {chat_id}: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
REFLECTION = (
    "<b>üßò‚Äç‚ôÇÔ∏è –°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è. –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.</b>\n"
    "<i>–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏. –ù–∞–π–¥–∏ –º–∏–Ω—É—Ç—É —Ç–∏—à–∏–Ω—ã –∏ —á–µ—Å—Ç–Ω–æ –æ—Ç–≤–µ—Ç—å —Å–µ–±–µ:</i>\n"
    "1Ô∏è‚É£ –í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —ç–º–æ—Ü–∏–∏ –±—Ä–∞–ª–∏ –≤–µ—Ä—Ö –∏ –∫–∞–∫ –º–æ–≥ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–µ?\n"
    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—Ü–∏–∑–º—É, –∞ —á—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–ª–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º?\n"
    "3Ô∏è‚É£ –ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –≤–∞–∂–Ω–æ —á–µ—Ä–µ–∑ –≥–æ–¥?\n"
    "4Ô∏è‚É£ –ì–¥–µ —É–ø—É—Å—Ç–∏–ª —à–∞–Ω—Å –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º?\n"
    "5Ô∏è‚É£ –ö–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å—Ç–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–æ—Å—Ç–∞?"
)
async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in list(subscribers):
        tz = users_tz.get(chat_id)
        if not tz:
            continue
        try:
            await context.bot.send_message(chat_id=chat_id, text=REFLECTION, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ {chat_id}: {e}")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[city] for city in CITY_TZ]
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:',
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    chat_id = update.effective_chat.id
    tz = CITY_TZ.get(city)
    if not tz:
        await update.message.reply_text('–ì–æ—Ä–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        return
    users_tz[chat_id] = tz
    subscribers.add(chat_id)
    await update.message.reply_text(
        '‚úÖ –ì–æ—Ç–æ–≤–æ!\n'
        '–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å –∏–∑ —Å—Ç–æ–∏—Ü–∏–∑–º–∞ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00.\n\n'
        'üîî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.'
    )
    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞: {chat_id}, TZ={tz}")

# /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    subscribers.discard(chat_id)
    users_tz.pop(chat_id, None)
    await update.message.reply_text('‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.')

# main
def main():
    token = os.getenv('BOT_TOKEN')
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('stop', stop))
    app.add_handler(MessageHandler(filters.Text(list(CITY_TZ.keys())), set_city))

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ TZ: —Ü–∏—Ç–∞—Ç—ã –≤ 9:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    app.job_queue.run_daily(send_quote, time=time(9,0), tzinfo=None)
    # –†–µ—Ñ–ª–µ–∫—Å–∏—è: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6) –≤ 12:00
    app.job_queue.run_daily(send_reflection, time=time(12,0), days=(6,), tzinfo=None)

    app.run_polling()

if __name__ == '__main__':
    main()
