import os
import logging
import random
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackContext,
)
from telegram.ext import ConversationHandler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.cron import CronTrigger

from stoic_quotes_100 import QUOTES

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = os.getenv("BOT_TOKEN")
subscribers = {}

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏ –∏—Ö —Å–º–µ—â–µ–Ω–∏—è –ø–æ UTC
CITIES = {
    "–ú–æ—Å–∫–≤–∞": 3,
    "–¢–±–∏–ª–∏—Å–∏": 4,
    "–ö–∏–µ–≤": 3,
    "–°–∞–º–∞—Ä–∞": 4,
    "–õ–æ–Ω–¥–æ–Ω": 0,
    "–†–∏–º": 2,
    "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞": 2,
}
CITY_LIST = list(CITIES.keys())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSE_CITY = 1

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [[city] for city in CITY_LIST]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üëá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.", reply_markup=reply_markup)
    return CHOOSE_CITY

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
async def choose_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    city = update.message.text
    chat_id = update.effective_chat.id

    if city not in CITIES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSE_CITY

    tz_offset = CITIES[city]
    subscribers[chat_id] = tz_offset

    await update.message.reply_text(
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–æ–∏—á–µ—Å–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.",
        parse_mode='HTML'
    )
    await update.message.reply_text(
        "üîî <i>Telegram –º–æ–∂–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–æ–∏—á–µ—Å–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã ‚Äî –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.</i>",
        parse_mode='HTML'
    )
    logger.info(f"–ü–æ–¥–ø–∏—Å–∞–Ω: {chat_id} –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ {tz_offset}")
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in subscribers:
        del subscribers[chat_id]
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# –¶–∏—Ç–∞—Ç–∞
async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in subscribers:
        try:
            quote = random.choice(QUOTES)
            await context.bot.send_message(chat_id=chat_id, text=quote, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã: {e}")

# –†–µ—Ñ–ª–µ–∫—Å–∏—è
REFLECTION_TEXT = (
    "üß† <b>–ù–µ–¥–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è</b>\n"
    "üëâ <i>–í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —è –ø–æ–∑–≤–æ–ª–∏–ª —ç–º–æ—Ü–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö, –∏ –∫–∞–∫ —è –º–æ–≥ –±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –º—É–¥—Ä–æ?</i>\n"
    "üëâ <i>–ö–∞–∫–∏–µ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º, –∞ –∫–∞–∫–∏–µ –µ–º—É –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–ª–∏?</i>\n"
    "üëâ <i>–ß—Ç–æ –∏–∑ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ–¥?</i>\n"
    "üëâ <i>–ö–æ–≥–¥–∞ —è —É–ø—É—Å—Ç–∏–ª —à–∞–Ω—Å –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º?</i>\n"
    "üëâ <i>–ö–∞–∫–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–ª–∏ –º–æ–∏–º —Ä–æ—Å—Ç–æ–º?</i>"
)

async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in subscribers:
        try:
            await context.bot.send_message(chat_id=chat_id, text=REFLECTION_TEXT, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={CHOOSE_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_city)]},
        fallbacks=[]
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("stop", stop))

    app.job_queue.run_repeating(send_quote, interval=30, first=10)
    app.job_queue.run_repeating(send_reflection, interval=30, first=20)

    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
