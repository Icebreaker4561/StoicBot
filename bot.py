import os
import logging
import random
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters
)
from telegram.constants import ParseMode
from stoic_quotes_100 import QUOTES

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
subscribers = {}  # chat_id: timezone_offset

CITIES = {
    "–¢–±–∏–ª–∏—Å–∏": 4,
    "–ú–æ—Å–∫–≤–∞": 3,
    "–ö–∏–µ–≤": 3,
    "–°–∞–º–∞—Ä–∞": 4,
    "–†–∏–º": 2,
    "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞": 2,
    "–õ–æ–Ω–¥–æ–Ω": 1
}

def build_timezone_keyboard():
    keyboard = [[InlineKeyboardButton(city, callback_data=city)] for city in CITIES]
    return InlineKeyboardMarkup(keyboard)

async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    now_utc = datetime.utcnow()
    for chat_id, offset in subscribers.items():
        user_time = now_utc + timedelta(hours=offset)
        if user_time.minute % 2 == 0:
            quote = random.choice(QUOTES)
            try:
                await context.bot.send_message(chat_id=chat_id, text=quote, parse_mode=ParseMode.HTML)
                logger.info(f"–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {chat_id} –≤ {user_time.strftime('%H:%M')} –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã: {e}")

REFLECTION_TEXT = (
    "<b>üßò‚Äç‚ôÇÔ∏è –°—Ç–æ–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è. –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.</b>\n\n"
    "–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏. –ù–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã, —á—Ç–æ–±—ã —á–µ—Å—Ç–Ω–æ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –ø—Ä–æ–∂–∏—Ç—É—é –Ω–µ–¥–µ–ª—é. –û—Ç–≤–µ—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã ‚Äî –Ω–æ –æ–Ω–∏ –º–æ–≥—É—Ç –º–Ω–æ–≥–æ–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.\n\n"
    "1Ô∏è‚É£ –í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —è –ø–æ–∑–≤–æ–ª–∏–ª —ç–º–æ—Ü–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö –Ω–∞–¥ —Ä–∞–∑—É–º–æ–º, –∏ –∫–∞–∫ –º–æ–≥ –±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –º—É–¥—Ä–æ, –º—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∏ —É–º–µ—Ä–µ–Ω–Ω–æ?\n\n"
    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ç–æ–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º –∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º, –∞ –∫–∞–∫–∏–µ —à–ª–∏ –≤—Ä–∞–∑—Ä–µ–∑ —Å –Ω–∏–º–∏?\n\n"
    "3Ô∏è‚É£ –ß—Ç–æ –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ —è —Å—á–∏—Ç–∞–ª –≤–∞–∂–Ω—ã–º –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ–¥?\n\n"
    "4Ô∏è‚É£ –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª—É–∂–∏—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º —è —É–ø—É—Å—Ç–∏–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n\n"
    "5Ô∏è‚É£ –ö–∞–∫–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ —è —Å–º–æ–≥ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞, –∞ –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ —É–ø—É—Å—Ç–∏–ª?"
)

async def send_reflection(context: ContextTypes.DEFAULT_TYPE):
    now_utc = datetime.utcnow()
    for chat_id, offset in subscribers.items():
        user_time = now_utc + timedelta(hours=offset)
        if user_time.minute % 2 == 1:
            try:
                await context.bot.send_message(chat_id=chat_id, text=REFLECTION_TEXT, parse_mode=ParseMode.HTML)
                logger.info(f"–†–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {chat_id} –≤ {user_time.strftime('%H:%M')} –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(
        "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å—Ç–æ–∏—á–µ—Å–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é.\n\nüëá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=build_timezone_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in subscribers:
        del subscribers[chat_id]
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

async def select_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    city = query.data
    chat_id = query.message.chat.id
    offset = CITIES[city]
    subscribers[chat_id] = offset
    await query.edit_message_text(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {city} (UTC+{offset}) –≤—ã–±—Ä–∞–Ω. –†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ {city} —Å UTC+{offset}")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CallbackQueryHandler(select_timezone))

    app.job_queue.run_repeating(send_quote, interval=60, first=0)
    app.job_queue.run_repeating(send_reflection, interval=60, first=15)

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.run_until_disconnected()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
